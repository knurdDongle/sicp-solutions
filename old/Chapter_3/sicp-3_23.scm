#! /usr/local/bin/csi -s
(use sicp)
(require-extension test)

(define (make-double-linked-list item)
  (cons item (cons '() '())))

(define (get-val dllist)
  (car dllist))

(define (get-next dllist)
  (cddr dllist))

(define (get-priv dllist)
  (cadr dllist))

(define (set-val! dllist val)
  (set-car! dllist val))

(define (set-next! dllist item)
  (set-cdr! (cdr dllist) item))

(define (set-priv! dllist item)
  (set-car! (cdr dllist) item))


(define (make-dueue)
       (let ((front-ptr '()) (rear-ptr '()))
            (begin  (define (set-front-ptr! item) (set! front-ptr item))
                    (define (set-rear-ptr! item) (set! rear-ptr item))
                    (define (empty-dueue?) (null? front-ptr))
                    (define (front-deque) (get-val front-ptr))
                    (define (rear-deque) (get-val rear-ptr))
                    (define (front-insert-deque! item)
                      (let ((new-item (make-double-linked-list item)))
                           (cond ((empty-dueue?)
                                  (set-front-ptr! new-item)
                                  (set-rear-ptr! new-item))
                              (else (set-priv! front-ptr new-item)
                                    (set-next! new-item front-ptr)
                                    (set-front-ptr! new-item)))))
                    (define (rear-insert-deque! item)
                      (let ((new-item (make-double-linked-list item)))
                           (cond ((empty-dueue?)
                                  (set-front-ptr! new-item)
                                  (set-rear-ptr! new-item))
                              (else (set-next! rear-ptr new-item)
                                    (set-priv! new-item rear-ptr)
                                    (set-rear-ptr! new-item)))))
                    (define (front-delete-deque!)
                      (set-front-ptr! (get-next front-ptr))
                      (set-priv! front-ptr '()))
                    (define (rear-delete-deque!)
                      (set-rear-ptr! (get-priv rear-ptr))
                      (set-next! rear-ptr '()))
                    (define (print-dueue)
                      (define (iter dlist)
                        (if (equal? dlist '())
                            (newline)
                            (begin (display (get-val dlist)) (display "-->")
                                   (iter (get-next dlist)))))
                      (iter front-ptr))
                    (define (dispatch massage)
                      (cond ((equal? massage 'empty-deque?) (empty-deque?))
                            ((equal? massage 'front-deque) (front-deque))
                            ((equal? massage 'rear-deque) (rear-deque))
                            ((equal? massage 'front-insert-deque!) front-insert-deque!)
                            ((equal? massage 'rear-insert-deque!) rear-insert-deque!)
                            ((equal? massage 'front-delete-deque!) (front-delete-deque!))
                            ((equal? massage 'rear-delete-deque!) (rear-delete-deque!))
                            ((equal? massage 'print-dueue) (print-dueue))))            
                    dispatch)))

                    
(define deq (make-dueue))
((deq 'front-insert-deque!) 'a)
(deq 'print-dueue) 
((deq 'front-insert-deque!) 'm)
(deq 'print-dueue) 
((deq 'front-insert-deque!) 'i)
(deq 'print-dueue)
((deq 'rear-insert-deque!) 'x)
(deq 'print-dueue)
(deq 'front-delete-deque!) 
(deq 'print-dueue)
((deq 'rear-insert-deque!) 'p)
(deq 'print-dueue)
(deq 'rear-delete-deque!)
(deq 'print-dueue)
(print (deq 'front-deque))
(print (deq 'rear-deque))