#! /usr/local/bin/csi -s
(use sicp)

(define (make-queue)
  (let ((front-ptr '()) (rear-ptr '()))
       (begin (define (set-front-ptr! item) (set! front-ptr item))
              (define (set-rear-ptr! item) (set! rear-ptr item))
              (define (empty-queue?) (null? front-ptr))
              (define (front-queue)
                (if (empty-queue?)
                    (error "FRONT called with an empty queue")
                    (car front-ptr)))
              (define (insert-queue! item)
                (let ((new-item (cons item '())))
                     (cond ((empty-queue?)
                            (set-front-ptr! new-item)
                            (set-rear-ptr! new-item))
                          (else  (set-cdr! rear-ptr new-item)
                                 (set-rear-ptr! new-item)))))
              (define (delete-queue!)
                (if (empty-queue?)
                    (error "DELETE! called with an empty queue")
                    (set-front-ptr! (cdr front-ptr))))
              (define (print-queue)
                (define (helper-print pair)
                  (if (null? pair)
                      (newline)
                      (begin (display (car pair)) (display "<--")
                            (helper-print (cdr pair)))))
                (helper-print front-ptr))
              (define (dispatch massage)
                (cond ((equal? massage 'empty-queue?) (empty-queue?))
                      ((equal? massage 'front-queue) (front-queue))
                      ((equal? massage 'insert-queue!) insert-queue!)
                      ((equal? massage 'delete-queue!) delete-queue!)
                      ((equal? massage 'print-queue) print-queue)))
              dispatch)))
            

(define (test)
  (define fifo (make-queue))
  ((fifo 'insert-queue!) 'm)
  ((fifo 'print-queue))
  ((fifo 'insert-queue!) 'a)
  ((fifo 'print-queue))
  (print "Should be m:")
  (print (fifo 'front-queue))
  ((fifo 'delete-queue!))
  ((fifo 'insert-queue!) 'x)
  ((fifo 'print-queue))
  (print "Should be a:")
  (print (fifo 'front-queue)))

(test)
