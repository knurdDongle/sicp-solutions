#lang sicp

(#%require rackunit rackunit/text-ui)
(#%require racket/base)
(#%require "../solutions/3_23.rkt")


(define tests
  (test-suite
    "Test for exercise 3_23"
    (test-case
      "Case here"
      (displayln "Create empty deq")
      (define deq (make-deque))
      (check-exn exn:fail? (lambda () (front-delete-deque! deq)))
      (print-deque deq)
      (displayln "Insert 1 in front")
      (front-insert-deque! deq 1)
      (print-deque deq)
      (displayln "Insert 0 in front")
      (front-insert-deque! deq 0)
      (print-deque deq)
      (displayln "Insert 2 in rear")
      (rear-insert-deque! deq 2)
      (print-deque deq)
      (displayln "Insert -1 in front")
      (front-insert-deque! deq -1)
      (print-deque deq)
      (displayln "Delete elm from front")
      (front-delete-deque! deq)
      (print-deque deq)
      (displayln "Delete elm from rear")
      (rear-delete-deque! deq)
      (print-deque deq)
      (displayln "Add 3 elm from fron and delete 3 from rear")
      (front-insert-deque! deq -10)
      (front-insert-deque! deq -20)
      (front-insert-deque! deq -30)
      (print-deque deq)
      (rear-delete-deque! deq)
      (rear-delete-deque! deq)
      (rear-delete-deque! deq)
      (print-deque deq)
      (check-equal? (front-deque deq) -30)
      (check-equal? (rear-deque deq) -20)
      (displayln "Delete all from rear")
      (rear-delete-deque! deq)
      (rear-delete-deque! deq)
      (print-deque deq)
      (check-exn exn:fail? (lambda () (rear-delete-deque! deq)))
      (check-exn exn:fail? (lambda () (front-delete-deque! deq)))
      (displayln "Insert 2 elm from rear and one from front to empty deque")
      (rear-insert-deque! deq 10)
      (check-equal? (front-deque deq) 10 "Front and rear is the same elm")
      (check-equal? (rear-deque deq) 10 "Front and rear is the same elm")
      (front-insert-deque! deq -10)
      (rear-insert-deque! deq 20)
      (print-deque deq)
      (displayln "Delete all from front")
      (front-delete-deque! deq)
      (front-delete-deque! deq)
      (front-delete-deque! deq)
      (print-deque deq)
      (check-exn exn:fail? (lambda () (rear-delete-deque! deq)))
      (check-exn exn:fail? (lambda () (front-delete-deque! deq)))
      (check-exn exn:fail? (lambda () (front-deque deq)))
      (check-exn exn:fail? (lambda () (rear-deque deq))))))
(run-tests tests 'verbose)

